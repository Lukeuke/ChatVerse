@attribute [Authorize]
@page "/messages/g/{Id}"
@using Web.Application.Repositories.Chat
@using Web.Domain.DTOs
@using Web.Domain.Models
@using Web.Domain.Models.Chat
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using Web.Application.Stores
@inject IChatRepository ChatRepository
@inject ICryptoClient CryptoClient
@inject IHttpClientFactory HttpClient
@inject TokenStore TokenStore

@if (MessagesList is null || MembersAndCount.Value.users is null)
{
    <div>
        Loading...
    </div>   
}
else
{
    <div class="d-flex w-100">
        <div class="w-75 overflow-auto mb-2 messages-container" id="message-container">
            @foreach (var message in MessagesList)
            {
                <div class="bg-black rounded p-2 m-2">
                    <div>
                        @message!.SenderFullName says: <span class="text-muted" style="font-size:calc(3px * 0.5vw);">@DateTimeOffset.FromUnixTimeSeconds((long)message.TimeStampOffset).ToString("g")</span>
                    </div>
                    <div>@message.Content</div>
                </div>
            }
        </div>
        
        <div class="w-25 position-sticky p-2">
            <div>
                <div>
                    Chat Members:
                    <div>
                        <ul>
                            @{
                                foreach (var user in MembersAndCount.Value.users)
                                {
                                    <li>@user</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="fixed-bottom p-3 w-50" style="margin-left: 20%">
            <EditForm Model="@CreateMessage" OnValidSubmit="SendMessage">
            <div class="d-flex">
                <input type="text" placeholder="Write message here..." class="form-control w-75" @bind="CreateMessage.Content"/>
                <input type="submit" class="form-control col-6 btn btn-primary w-25" value="Send" />
            </div>
            </EditForm>
        </div>
    </div>
    
    <style>
        .messages-container {
            max-height: 85vh;
            overflow-y: auto;
              display: flex;
              flex-direction: column;
        }
    </style>
}
@code {
    [Parameter]
    public string Id { get; set; }
    
    private List<ChatNameIdModel>? Chats { get; set; } = null;
    private List<IGetMessagesByGroupId_MessagesByGroupId_Nodes?>? MessagesList { get; set; } = new();
    private (List<string>? users, int Count)? MembersAndCount { get; set; } = new();
    private bool Loaded { get; set; } = false;

    private string Username { get; set; }
    
    private CreateMessageDto CreateMessage { get; set; } = new ();
    
    protected override async Task OnInitializedAsync()
    {
        var jwt = await LocalStorage.GetItemAsStringAsync("token");

        Username = await LocalStorage.GetItemAsStringAsync("username");
        
        var chats = await ChatRepository.GetChats(jwt.Replace("\"", ""));

        Chats = chats.ToList();
        await GetMessages();
        SubscribeToGroup();
        MembersAndCount = await GetMembersAndCount();
    }

    private async Task GetMessages()
    {
        if (!Loaded)
        {
            MessagesList = new();
            Loaded = true;
            var executeAsync = await CryptoClient.GetMessagesByGroupId.ExecuteAsync(Guid.Parse(Id!), 50);
            MessagesList = executeAsync.Data.MessagesByGroupId.Nodes.ToList();
            StateHasChanged();
        }
    }

    private async Task<(List<string> users, int Count)> GetMembersAndCount()
    {
        var users = new List<string>();
        
        var client = HttpClient.CreateClient("group");

        var jwt = client.DefaultRequestHeaders.Authorization;
        
        var json = await client.GetStringAsync($"group/{Id}");

        var members = JsonConvert.DeserializeObject<List<Member>>(json);

        foreach (var member in members!)
        {
            client = HttpClient.CreateClient("identity");
            client.DefaultRequestHeaders.Authorization = jwt;

            var username = await client.GetStringAsync($"auth/user/{member.Id}");
            
            var usernameModel = JsonConvert.DeserializeObject<UsernameModel>(username);
            
            users.Add(usernameModel!.Username);
        }

        return (users, members.Count);
    }
    
    private void SubscribeToGroup()
    {
        CryptoClient.GroupSubscribe.Watch(Id).Subscribe(r =>
        {
            var data = r.Data?.MessageCreated;
            MessagesList?.Add(new GetMessagesByGroupId_MessagesByGroupId_Nodes_Message(data?.Content, data?.SenderFullName, data?.TimeStampOffset));
        });
        StateHasChanged();
        Console.WriteLine($"{Username} has subscribed");
    }

    private async Task SendMessage()
    {
        var jwt = await LocalStorage.GetItemAsStringAsync("token");

        TokenStore.Jwt = jwt.Replace("\"", "");
        
        var result = await CryptoClient.CreateMessage.ExecuteAsync(new CreateMessageDtoInput
        {
            Content = CreateMessage.Content,
            GroupId = Guid.Parse(Id!)
        });

        if (result.Data.CreateMessage)
        {
            CreateMessage.Content = string.Empty;
            await GetMessages();
        }
    }
}