@attribute [Authorize]
@page "/messages/{Id?}"
@using Web.Application.Repositories.Chat
@using Web.Domain.Models.Chat
@inject IChatRepository ChatRepository
@inject ICryptoClient CryptoClient

@if (Chats is null)
{
    <div>
        Loading...
    </div>
}
else
{
    if (Id is null)
    {
        foreach (var chatModel in Chats)
        {
            <div>
                <a @onclick='() => NavigationManager.NavigateTo($"messages/{chatModel.Id}")'><div>@chatModel.Name</div></a>
            </div>
        }
    }
    else
    {
        GetMessages();
        if (MessagesList is null)
        {
            <div>
                Loading...
            </div>   
        }
        else
        {
            <div class="bg-black rounded p-2">
                @foreach (var message in MessagesList)
                {
                    <div>@message!.SenderFullName says:</div>
                    <div>@message.Content</div>
                }
            </div>
        }
    }
}

@code {
    [Parameter]
    public string? Id { get; set; }
    
    private List<ChatNameIdModel>? Chats { get; set; } = null;
    private List<IGetMessagesByGroupId_MessagesByGroupId_Nodes?>? MessagesList { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var jwt = await LocalStorage.GetItemAsStringAsync("token");

        var chats = await ChatRepository.GetChats(jwt.Replace("\"", ""));

        Chats = chats.ToList();
    }

    private async Task GetMessages()
    {
        var executeAsync = await CryptoClient.GetMessagesByGroupId.ExecuteAsync(Guid.Parse(Id!));
        MessagesList = executeAsync.Data.MessagesByGroupId.Nodes.ToList();
        StateHasChanged();
    }
}